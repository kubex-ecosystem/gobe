package sys

import (
	"net/http"

	proto "github.com/kubex-ecosystem/gobe/internal/app/router/types"
	ar "github.com/kubex-ecosystem/gobe/internal/contracts/interfaces"
	"github.com/kubex-ecosystem/gobe/internal/proxy/hub"

	gl "github.com/kubex-ecosystem/gobe/internal/module/logger"
	swaggerfiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "github.com/kubex-ecosystem/gobe/docs" // docs is generated by Swag CLI
)

type SwaggerRoutes struct {
	ar.IRouter
	h *hub.DiscordMCPHub
}

func NewSwaggerRoutes(rtr *ar.IRouter) map[string]ar.IRoute {
	if rtr == nil {
		gl.Log("error", "Router is nil for SwaggerRoute")
		return nil
	}
	rtl := *rtr

	dbService := rtl.GetDatabaseService()
	if dbService == nil {
		gl.Log("error", "Database service is nil for SwaggerRoute")
		return nil
	}

	routesMap := make(map[string]ar.IRoute)

	middlewaresMap := rtl.GetMiddlewares()
	if len(middlewaresMap) == 0 {
		gl.Log("error", "Middlewares map is empty for SwaggerRoute")
		return nil
	}

	secureProperties := make(map[string]bool)
	secureProperties["secure"] = false
	secureProperties["validateAndSanitize"] = false
	secureProperties["validateAndSanitizeBody"] = false

	// Initialize Swagger
	ginSwagger.WrapHandler(swaggerfiles.Handler,
		ginSwagger.URL("http://localhost:8080/swagger/doc.json"),
		ginSwagger.DefaultModelsExpandDepth(-1))

	// Set up routes

	routesMap["doc"] = proto.NewRoute(
		http.MethodGet,
		"/swagger/*any",
		"application/json",
		ginSwagger.WrapHandler(swaggerfiles.Handler),
		nil,
		dbService,
		secureProperties,
		nil,
	)

	return routesMap
}
