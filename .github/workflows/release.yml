name: 🚀 Gobe Multi-Platform Release

on:
  push:
    tags:
      - "v*.*.*" 
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for manual release (e.g., v1.0.0)'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # ==========================================
  # JOB 1: Build All Platforms  
  # ==========================================
  build:
    name: 🏗️ Cross-Platform Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      go-version: ${{ steps.go-setup.outputs.go-version }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Extract Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.tag_name }}" ]]; then
            echo "version=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Validate Tag Format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z (e.g., v1.2.3)"
            exit 1
          fi
          echo "✅ Valid version: $VERSION"

      - name: 🐹 Smart Go Setup
        id: go-setup
        run: |
          echo "🔍 Detecting Go version from go.mod..."
          GO_VERSION=$(grep '^go ' go.mod | awk '{print $2}')
          echo "📦 Detected Go version: $GO_VERSION"
          
          echo "🚀 Installing Go $GO_VERSION using your custom script..."
          bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/rafa-mori/gosetup/main/go.sh')" -s --version "$GO_VERSION"
          
          # Verify installation
          go version
          echo "✅ Go setup completed successfully!"
          
          # Output for other jobs
          echo "go-version=$GO_VERSION" >> $GITHUB_OUTPUT

      - name: 🗃️ Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ steps.go-setup.outputs.go-version }}-${{ hashFiles('**/go.sum', '**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ steps.go-setup.outputs.go-version }}-

      - name: 🐧 Build Linux AMD64
        run: |
          echo "🚀 Building Linux AMD64..."
          make build linux amd64
          echo "✅ Linux build completed!"

      - name: 🪟 Build Windows AMD64  
        run: |
          echo "🚀 Building Windows AMD64..."
          make build windows amd64
          echo "✅ Windows build completed!"

      - name: 🍎 Build macOS AMD64
        run: |
          echo "🚀 Building macOS AMD64..."
          make build darwin amd64  
          echo "✅ macOS build completed!"

      - name: 📦 Verify Build Artifacts
        run: |
          echo "📦 Build artifacts created:"
          ls -la bin/
          
          echo "🔐 Generating checksums..."
          cd bin
          sha256sum gobe-* > SHA256SUMS
          echo "✅ Checksums generated!"
          ls -la

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gobe-release-binaries
          path: |
            bin/gobe-*
          retention-days: 30

  # ==========================================
  # JOB 2: Security Scan (Optional)
  # ==========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐹 Smart Go Setup
        run: |
          echo "🔍 Detecting Go version from go.mod..."
          GO_VERSION=$(grep '^go ' go.mod | awk '{print $2}')
          echo "📦 Using Go version: $GO_VERSION"
          
          echo "🚀 Installing Go $GO_VERSION using custom script..."
          bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/rafa-mori/gosetup/main/go.sh')" -s --version "$GO_VERSION"
          
          # Verify installation
          go version
          echo "✅ Go setup completed!"

      - name: 🗃️ Restore Go Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ needs.build.outputs.go-version }}-${{ hashFiles('**/go.sum', '**/go.mod') }}

      - name: 🔍 Run Gosec Security Scanner
        run: |
          echo "🔍 Installing and running Gosec..."
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec -no-fail -fmt sarif -out gosec.sarif ./...
          echo "✅ Security scan completed!"

      - name: 📊 Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

  # ==========================================
  # JOB 3: Create GitHub Release
  # ==========================================
  release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.build.result == 'success'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: gobe-release-binaries
          path: ./release-assets

      - name: 📝 Generate Release Notes
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          
          # Create comprehensive release notes
          cat > RELEASE_NOTES.md << 'EOF'
          ## 🚀 Gobe Release ${{ needs.build.outputs.version }}
          
          ### 📦 What's Included
          
          This release contains cross-platform binaries for:
          
          - 🐧 **Linux (AMD64)**: `gobe-linux-amd64.tar.gz`
          - 🪟 **Windows (AMD64)**: `gobe-windows-amd64.zip`  
          - 🍎 **macOS (AMD64)**: `gobe-darwin-amd64.tar.gz`
          
          ### 📥 Installation
          
          #### Linux/macOS
          ```bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/${{ needs.build.outputs.version }}/gobe-linux-amd64.tar.gz
          tar -xzf gobe-linux-amd64.tar.gz
          chmod +x gobe-linux-amd64
          sudo mv gobe-linux-amd64 /usr/local/bin/gobe
          ```
          
          #### Windows
          ```powershell
          # Download and extract the ZIP file
          # Add the executable to your PATH
          ```
          
          ### 🔐 Verification
          
          All binaries are compressed and checksums are provided in `SHA256SUMS`.
          
          ```bash
          # Verify checksum
          sha256sum -c SHA256SUMS
          ```
          
          ### 📊 Build Information
          
          - **Go Version**: ${{ needs.build.outputs.go-version }}
          - **Built on**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: ${{ github.sha }}
          - **Workflow**: ${{ github.run_id }}
          
          ---
          
          **Full Changelog**: [${{ github.repository }}/compare/...](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})
          EOF

      - name: 🎉 Create GitHub Release
        run: |
          echo "🎉 Creating GitHub Release..."
          
          # Create release using GitHub CLI
          gh release create "${{ needs.build.outputs.version }}" \
            ./release-assets/* \
            --title "🚀 Gobe ${{ needs.build.outputs.version }}" \
            --notes-file RELEASE_NOTES.md \
            ${{ contains(needs.build.outputs.version, '-') && '--prerelease' || '' }}
          
          echo "✅ Release created successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📢 Release Summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Go Version**: ${{ needs.build.outputs.go-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Assets Released:" >> $GITHUB_STEP_SUMMARY
          echo "- 🐧 Linux AMD64" >> $GITHUB_STEP_SUMMARY
          echo "- 🪟 Windows AMD64" >> $GITHUB_STEP_SUMMARY
          echo "- 🍎 macOS AMD64" >> $GITHUB_STEP_SUMMARY