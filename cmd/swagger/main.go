// Package swagger provides the Swagger documentation for the GoBE API.
// @title       GoBE API
// @version     0.2.1
// @description Backend modular do ecossistema Kubex.
// @termsOfService  https://github.com/kubex-ecosystem/gobe/terms
// @contact.name   GoBE API Support
// @contact.url    https://github.com/kubex-ecosystem/gobe
// @contact.email  support@gobe.dev
// @license.name  MIT
// @license.url   https://opensource.org/licenses/MIT
// @host      localhost:8080
// @BasePath  /
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Forne√ßa "Bearer <token>"
// @externalDocs.description  OpenAPI
// @externalDocs.url          https://swagger.io/resources/open-api/
// Package swagger provides the Swagger documentation for the GoBE API.
package main

import (
	"context"
	"net"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/kubex-ecosystem/gobe/internal/app/router"
	"github.com/kubex-ecosystem/gobe/internal/module/kbx"

	docs "github.com/kubex-ecosystem/gobe/docs" // docs is generated by Swag CLI
	services "github.com/kubex-ecosystem/gobe/internal/bridges/gdbasez"
	"github.com/kubex-ecosystem/gobe/internal/contracts/types"
	l "github.com/kubex-ecosystem/logz"
	gl "github.com/kubex-ecosystem/logz/logger"
	swaggerfiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

func SwaggerMain(dbService *services.DBServiceImpl, _ error) {
	// Initialize logger
	gl.Log("info", "Initializing Swagger...")
	rtr, err := router.NewRouter(
		types.NewGoBEConfig(
			"Swagger",
			"",
			"json",
			"0.0.0.0",
			"8088",
		),
		dbService,
		&kbx.InitArgs{},
		l.GetLogger("GoBE Swagger"),
		true,
	)
	if err != nil {
		gl.Log("fatal", "‚ùå Failed to initialize router:", err)
		return
	}
	rtr.GetEngine().MaxMultipartMemory = 8 << 20 // 8 MiB
	rtr.GetEngine().Use(gin.Logger())
	rtr.GetEngine().Use(gin.ErrorLogger())
	rtr.GetEngine().Use(gin.Recovery())

	// Initialize Swagger
	ginSwagger.WrapHandler(swaggerfiles.Handler,
		ginSwagger.URL("http://localhost:8080/swagger/doc.json"),
		ginSwagger.DefaultModelsExpandDepth(-1))

	// Set up Swagger UI
	//router.GetEngine().GET("/swagger/*any", ginSwagger.WrapHandler(swaggerfiles.Handler))

	secureProperties := make(map[string]bool)
	secureProperties["secure"] = false
	secureProperties["validateAndSanitize"] = false
	secureProperties["validateAndSanitizeBody"] = false

	// Initialize routes
	router.GetDefaultRouteMap(rtr)

	// Set up routes
	rtr.RegisterRoute(
		"doc",
		"Swagger",
		router.NewRoute(
			http.MethodGet,
			"/swagger/*any",
			"application/json",
			ginSwagger.WrapHandler(swaggerfiles.Handler),
			nil,
			dbService,
			secureProperties,
			nil,
		),
		[]string{"authentication"},
	)

	// Set up CORS
	err = router.SecureServerInit(rtr.GetEngine(), net.JoinHostPort("localhost", "8080"))
	if err != nil {
		gl.Log("fatal", "‚ùå Failed to initialize CORS:", err)
		return
	}

	// Start server
	gl.Log("info", "üöÄ GoBE API Server starting...")
	gl.Log("info", "üìö Swagger docs available at: http://localhost:8080/swagger/index.html")
	gl.Log("info", "üîç API endpoints at: http://localhost:8080/api/v1")

	docs.SwaggerInfo.Host = "localhost:8080"
	docs.SwaggerInfo.Title = "GoBE API"

	if err := rtr.Start(); err != nil {
		gl.Log("fatal", "‚ùå Failed to start server:", err)
	}
}

func main() {
	dbService, err := services.NewDBService(context.Background(), nil, nil)
	SwaggerMain(dbService.(*services.DBServiceImpl), err)
}
