// Package swagger provides the Swagger documentation for the GoBE API.
// @title           GoBE API
// @version         1.0
// @description     GoBE is a powerful backend, MCP, and API server with a comprehensive route system following GoBE patterns.
// @termsOfService  https://github.com/rafa-mori/gobe/terms

// @contact.name   GoBE API Support
// @contact.url    https://github.com/rafa-mori/gobe
// @contact.email  support@gobe.dev

// @license.name  MIT
// @license.url   https://opensource.org/licenses/MIT

// @host      localhost:8080
// @BasePath  /

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

// @securityDefinitions.oauth2 OAuth2
// @tokenUrl https://localhost:8080/sign-in
// @security OAuth2

// @externalDocs.description  OpenAPI
// @externalDocs.url          https://swagger.io/resources/open-api/
// Package swagger provides the Swagger documentation for the GoBE API.
package main

import (
	"net"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/rafa-mori/gobe/internal/routes"

	"github.com/rafa-mori/gobe/internal/types"
	"github.com/rafa-mori/gobe/logger"
	swaggerfiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	docs "github.com/rafa-mori/gobe/docs" // docs is generated by Swag CLI
	"github.com/rafa-mori/gobe/internal/services"
	l "github.com/rafa-mori/logz"
)

var gl = logger.GetLogger[l.Logger](nil)

func SwaggerMain() {
	// Initialize logger
	gl.Log("info", "Initializing Swagger...")
	environment, err := types.NewEnvironment(
		"",
		false,
		l.GetLogger("GoBE Swagger"),
	)
	if err != nil {
		gl.Log("fatal", "‚ùå Failed to create environment:", err)
		return
	}
	dbConfigPathProp, _ := environment.GetenvOrDefault("DB_CONFIG_PATH", os.ExpandEnv("$HOME/.kubex/gdbase/config/db_config.json"))
	dbConfigPath := *dbConfigPathProp.Value()
	if _, ok := dbConfigPath.(string); !ok {
		gl.Log("fatal", "‚ùå Failed to get DB_CONFIG_PATH:", err)
		return
	}
	dbConfig, err := services.SetupDatabase(
		environment,
		dbConfigPath.(string),
		l.GetLogger("GoBE Swagger"),
		false,
	)
	dbService, err := services.NewDBService(dbConfig, l.GetLogger("GoBE Swagger"))
	if err != nil {
		gl.Log("fatal", "‚ùå Failed to create database service:", err)
		return
	}

	router, err := routes.NewRouter(
		types.NewGoBEConfig(
			"Swagger",
			"",
			"json",
			"0.0.0.0",
			"8080",
		),
		dbService,
		l.GetLogger("GoBE Swagger"),
		true,
	)
	if err != nil {
		gl.Log("fatal", "‚ùå Failed to initialize router:", err)
		return
	}
	router.GetEngine().MaxMultipartMemory = 8 << 20 // 8 MiB
	router.GetEngine().Use(gin.Logger())
	router.GetEngine().Use(gin.ErrorLogger())
	router.GetEngine().Use(gin.Recovery())

	// Initialize Swagger
	ginSwagger.WrapHandler(swaggerfiles.Handler,
		ginSwagger.URL("http://localhost:8080/swagger/doc.json"),
		ginSwagger.DefaultModelsExpandDepth(-1))

	// Set up Swagger UI
	//router.GetEngine().GET("/swagger/*any", ginSwagger.WrapHandler(swaggerfiles.Handler))

	secureProperties := make(map[string]bool)
	secureProperties["secure"] = true
	secureProperties["validateAndSanitize"] = false
	secureProperties["validateAndSanitizeBody"] = false

	// Initialize routes
	routes.GetDefaultRouteMap(router)

	// Set up routes
	router.RegisterRoute(
		"doc",
		"Swagger",
		routes.NewRoute(
			http.MethodGet,
			"/swagger/*any",
			"application/json",
			ginSwagger.WrapHandler(swaggerfiles.Handler),
			nil,
			dbService,
			secureProperties,
		),
		[]string{"authentication"},
	)

	// Set up CORS
	err = routes.SecureServerInit(router.GetEngine(), net.JoinHostPort("localhost", "8080"))
	if err != nil {
		gl.Log("fatal", "‚ùå Failed to initialize CORS:", err)
		return
	}

	// Start server
	gl.Log("info", "üöÄ GoBE API Server starting...")
	gl.Log("info", "üìö Swagger docs available at: http://localhost:8080/swagger/index.html")
	gl.Log("info", "üîç API endpoints at: http://localhost:8080/")

	docs.SwaggerInfo.Host = "localhost:8080"
	docs.SwaggerInfo.Title = "GoBE API"

	if err := router.Start(); err != nil {
		gl.Log("fatal", "‚ùå Failed to start server:", err)
	}
}

func main() {
	SwaggerMain()
}
