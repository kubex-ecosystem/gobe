{
    "swagger": "2.0",
    "info": {
        "description": "Backend modular do ecossistema Kubex.",
        "title": "GoBE API",
        "termsOfService": "https://github.com/kubex-ecosystem/gobe/terms",
        "contact": {
            "name": "GoBE API Support",
            "url": "https://github.com/kubex-ecosystem/gobe",
            "email": "support@gobe.dev"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "0.2.1"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/": {
            "get": {
                "description": "Retorna o index da UI ou mensagem indicando ausência do bundle. [Em desenvolvimento]",
                "produces": [
                    "text/html",
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Servir UI raiz",
                "responses": {
                    "200": {
                        "description": "Mensagem informativa",
                        "schema": {
                            "$ref": "#/definitions/gateway.MessageResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/advise": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Processa o prompt e retorna respostas via JSON ou SSE (`data: {\"delta\"}`) até concluir. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "text/event-stream"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Gerar aconselhamento",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chave externa do cliente",
                        "name": "X-External-API-Key",
                        "in": "header"
                    },
                    {
                        "description": "Parâmetros do aconselhamento",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gateway.AdviceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resposta final consolidada",
                        "schema": {
                            "$ref": "#/definitions/gateway.AdviceResponse"
                        }
                    },
                    "400": {
                        "description": "Requisição inválida",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Não autorizado",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Gateway indisponível",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/advise": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Processa o prompt e retorna respostas via JSON ou SSE (`data: {\"delta\"}`) até concluir. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "text/event-stream"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Gerar aconselhamento",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chave externa do cliente",
                        "name": "X-External-API-Key",
                        "in": "header"
                    },
                    {
                        "description": "Parâmetros do aconselhamento",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/gateway.AdviceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resposta final consolidada",
                        "schema": {
                            "$ref": "#/definitions/gateway.AdviceResponse"
                        }
                    },
                    "400": {
                        "description": "Requisição inválida",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Não autorizado",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Gateway indisponível",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analyzer/notifications/send": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send notification about analysis completion or status updates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analyzer"
                ],
                "summary": "Send Analysis Notification",
                "parameters": [
                    {
                        "description": "Notification details",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/analyzer.NotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/check": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Gera um novo par de tokens a partir do refresh token válido. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Renovar tokens",
                "parameters": [
                    {
                        "description": "Tokens atuais",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/users.RefreshRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/config": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna configuração básica da aplicação. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system beta"
                ],
                "summary": "Configuração",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manage.ConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/manage.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/contact": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Executa a mesma validação e envio do fluxo principal, retornando o resultado. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact beta"
                ],
                "summary": "Consultar contato",
                "parameters": [
                    {
                        "description": "Dados do formulário de contato",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_contracts_types.ContactForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/contacts.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cria uma nova entrada de contato e dispara notificações conforme configuração. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact beta"
                ],
                "summary": "Enviar contato",
                "parameters": [
                    {
                        "description": "Dados do formulário de contato",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_contracts_types.ContactForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/contacts.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/contact/form": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Recupera o formulário persistido após validar token do solicitante. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact beta"
                ],
                "summary": "Obter formulário",
                "parameters": [
                    {
                        "description": "Dados do formulário (inclui token)",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_contracts_types.ContactForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/contacts.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/contact/form/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna a submissão identificada pelo ID após validar o token. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact beta"
                ],
                "summary": "Obter formulário por ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do formulário",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dados do formulário (inclui token)",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_contracts_types.ContactForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/contacts.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/contact/handle": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Valida o token secreto e dispara o fluxo de envio de mensagem. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "contact beta"
                ],
                "summary": "Processar contato",
                "parameters": [
                    {
                        "description": "Dados do formulário de contato",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_contracts_types.ContactForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/contacts.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/contacts.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna todos os cron jobs cadastrados. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Listar cron jobs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronJobListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cria um novo cron job com os dados informados. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Criar cron job",
                "parameters": [
                    {
                        "description": "Dados do cron job",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cron.CronJobRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/cron.CronJobResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/active": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna apenas os cron jobs marcados como ativos. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Listar cron jobs ativos",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronJobListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/queue": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Recupera o estado atual da fila de jobs agendados. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Listar fila de jobs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronJobQueueResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/reprocess": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reenvia para execução os jobs que falharam anteriormente. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Reprocessar jobs com falha",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronActionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/validate": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Valida a expressão cron fornecida. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Validar expressão cron",
                "parameters": [
                    {
                        "description": "Expressão",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cron.CronValidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronValidateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Recupera um cron job específico pelo ID informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Obter cron job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cron job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronJobResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Atualiza os dados de um cron job identificado pelo ID. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Atualizar cron job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cron job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dados do cron job",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cron.CronJobRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronJobResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Exclui um cron job pelo ID informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Remover cron job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cron job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/{id}/disable": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Desativa o cron job informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Desabilitar cron job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cron job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/{id}/enable": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ativa o cron job informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Habilitar cron job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cron job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/{id}/execute": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Dispara manualmente a execução do cron job informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Executar cron job manualmente",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cron job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/{id}/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Recupera os logs associados ao cron job informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Listar logs de execução",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cron job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronExecutionLogsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/cronjobs/{id}/reschedule": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Atualiza a expressão do cron job informado. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Reagendar cron job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cron job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Nova expressão",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cron.RescheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/customers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Recupera a coleção de clientes registrados. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers beta"
                ],
                "summary": "Listar clientes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customers.ClientModel"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Persiste um novo cliente com os dados enviados no corpo. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers beta"
                ],
                "summary": "Criar cliente",
                "parameters": [
                    {
                        "description": "Dados do cliente",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customers.ClientModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customers.ClientModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/customers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Busca um cliente específico utilizando o identificador no caminho. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers beta"
                ],
                "summary": "Obter cliente",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cliente",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customers.ClientModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Atualiza um cliente identificado pelo ID. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers beta"
                ],
                "summary": "Atualizar cliente",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cliente",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dados atualizados",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customers.ClientModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customers.ClientModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Exclui o cliente identificado pelo ID informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers beta"
                ],
                "summary": "Remover cliente",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cliente",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Cliente removido",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/customers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/discord": {
            "get": {
                "description": "Entrega o bundle HTML da activity Discord. [Em desenvolvimento]",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Servir activity Discord",
                "responses": {
                    "200": {
                        "description": "HTML da activity",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/approvals": {
            "post": {
                "description": "Retorna solicitações aguardando aprovação manual. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Listar aprovações pendentes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordApprovalList"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/approve": {
            "post": {
                "description": "Confirma solicitações pendentes para liberar ações no hub. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Aprovar solicitação Discord",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID da solicitação",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/interactions": {
            "post": {
                "description": "Responde PINGs e interações de componentes enviados pelo Discord. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Processar interação Discord",
                "parameters": [
                    {
                        "description": "Interação recebida",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordInteractionEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordInteractionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/interactions/pending": {
            "post": {
                "description": "Retorna solicitações aguardando aprovação manual. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Listar aprovações pendentes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordApprovalList"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/oauth2/authorize": {
            "get": {
                "description": "Controla respostas HTML/JSON para autorizações OAuth2 do Discord. [Em desenvolvimento]",
                "produces": [
                    "text/html",
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Iniciar OAuth2 Discord",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordOAuthAuthorizeResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Controla respostas HTML/JSON para autorizações OAuth2 do Discord. [Em desenvolvimento]",
                "produces": [
                    "text/html",
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Iniciar OAuth2 Discord",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordOAuthAuthorizeResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/oauth2/token": {
            "get": {
                "description": "Realiza a troca do código por token em ambiente de testes. [Em desenvolvimento]",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Trocar token OAuth2 Discord",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordOAuthTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Realiza a troca do código por token em ambiente de testes. [Em desenvolvimento]",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Trocar token OAuth2 Discord",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordOAuthTokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/ping": {
            "get": {
                "description": "Checa se o hub MCP em execução está respondendo. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Ping hub Discord",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordPingResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Realiza ping utilizando o adaptador direto do Discord. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Ping ativo Discord",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mensagem customizada",
                        "name": "msg",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordPingResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/reject": {
            "post": {
                "description": "Marca a solicitação como rejeitada no fluxo de aprovação. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Rejeitar solicitação Discord",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID da solicitação",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/test": {
            "post": {
                "description": "Envia uma mensagem de teste para validar o pipeline MCP. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Simular mensagem Discord",
                "parameters": [
                    {
                        "description": "Conteúdo da mensagem",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordTestMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordTestResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/webhook/{webhookId}/{webhookToken}": {
            "post": {
                "description": "Processa eventos recebidos do webhook oficial do Discord. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Receber webhook Discord",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do webhook",
                        "name": "webhookId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Token do webhook",
                        "name": "webhookToken",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Evento do Discord",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordWebhookEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discord.DiscordWebhookAck"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/discord/websocket": {
            "get": {
                "description": "Estabelece canal WebSocket com o hub MCP para eventos Discord. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "discord beta"
                ],
                "summary": "Abrir WebSocket Discord",
                "responses": {
                    "101": {
                        "description": "WebSocket connection established",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/discord.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Augments status payload with module version for API consumers. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Gateway health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.GatewayHealthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/lookatni/archive": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Agenda o arquivamento de artefatos processados pelo LookAtni. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Arquivar LookAtni",
                "parameters": [
                    {
                        "description": "Configuração do arquivamento",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/gateway.LookAtniActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/lookatni/download/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna URL temporária para download do artefato processado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Baixar ativo LookAtni",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Identificador do recurso",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.LookAtniDownloadResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/lookatni/extract": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Enfileira uma extração de artefatos para processamento assíncrono. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Extrair LookAtni",
                "parameters": [
                    {
                        "description": "Configuração da extração",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/gateway.LookAtniActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/lookatni/projects": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Lista projetos cadastrados para automações LookAtni. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Listar projetos LookAtni",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.LookAtniProjectsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/mcp/analyzer/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get health status of the GemX Analyzer integration",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analyzer"
                ],
                "summary": "Get Analyzer Health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/mcp/analyzer/jobs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List repository analysis jobs with pagination and filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analyzer"
                ],
                "summary": "List Analysis Jobs",
                "parameters": [
                    {
                        "enum": [
                            "scheduled",
                            "running",
                            "completed",
                            "failed"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by repository URL",
                        "name": "repo_url",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results to return (default: 50)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/mcp/analyzer/results/{job_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get detailed results including scorecard, DORA metrics, and recommendations",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analyzer"
                ],
                "summary": "Get Analysis Results",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Analysis job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "scorecard",
                            "dora",
                            "chi",
                            "community"
                        ],
                        "type": "string",
                        "description": "Result format",
                        "name": "format",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_app_controllers_mcp_analyzer.ScorecardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/mcp/analyzer/schedule": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Schedule intelligent analysis of a repository using GemX Analyzer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analyzer"
                ],
                "summary": "Schedule Repository Analysis",
                "parameters": [
                    {
                        "description": "Analysis request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/analyzer.RepositoryIntelligenceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_app_controllers_mcp_analyzer.AnalysisJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/mcp/analyzer/status/{job_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the current status and progress of a repository analysis job",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analyzer"
                ],
                "summary": "Get Analysis Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Analysis job ID",
                        "name": "job_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_app_controllers_mcp_analyzer.AnalysisJob"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/analyzer.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics/ai": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Entrega métricas reais agregadas do sistema de análise e gateway",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Métricas de IA",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Período de análise (1h, 24h, 7d, 30d) - default: 24h",
                        "name": "period",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.ScorecardMetricsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/products": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Recupera a lista de produtos registrados na base. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products beta"
                ],
                "summary": "Listar produtos",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ProductModel"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Persiste um novo produto com os dados enviados no corpo. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products beta"
                ],
                "summary": "Criar produto",
                "parameters": [
                    {
                        "description": "Dados do produto",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProductModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProductModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/products/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Busca um produto específico pelo ID informado no caminho. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products beta"
                ],
                "summary": "Obter produto",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do produto",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProductModel"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Atualiza os dados de um produto identificado por ID. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products beta"
                ],
                "summary": "Atualizar produto",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do produto",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dados atualizados",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProductModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProductModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Exclui um produto identificado pelo ID informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products beta"
                ],
                "summary": "Remover produto",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do produto",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Produto removido",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/products.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/scorecard": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna os scorecards mais recentes de repositórios analisados",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Listar scorecard",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Número de resultados (default: 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filtrar por URL do repositório",
                        "name": "repo_url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.ScorecardResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/scorecard/advice": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fornece sugestões inteligentes baseadas nas métricas mais recentes de análises",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Aconselhar scorecard",
                "parameters": [
                    {
                        "type": "string",
                        "description": "URL específica do repositório para análise",
                        "name": "repo_url",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.ScorecardAdviceResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sign-in": {
            "post": {
                "description": "Valida credenciais e retorna par de tokens. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Autenticar usuário",
                "parameters": [
                    {
                        "description": "Credenciais",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sign-out": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalida o refresh token ativo do usuário. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Encerrar sessão",
                "parameters": [
                    {
                        "description": "Token de refresh",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/users.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sign-up": {
            "post": {
                "description": "Cria um novo usuário no sistema. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Registrar usuário",
                "parameters": [
                    {
                        "description": "Dados do usuário",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/users.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/start": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Dispara processo de inicialização do serviço GoBE. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system beta"
                ],
                "summary": "Iniciar serviço",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manage.ActionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/manage.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/stop": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Finaliza o serviço GoBE. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system beta"
                ],
                "summary": "Parar serviço",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manage.ActionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/manage.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/telegram/ping": {
            "get": {
                "description": "Verifica se o serviço do bot está respondendo. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "telegram beta"
                ],
                "summary": "Ping Telegram",
                "responses": {
                    "200": {
                        "description": "status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/telegram/send": {
            "post": {
                "description": "Dispara uma mensagem usando o serviço configurado. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "telegram beta"
                ],
                "summary": "Enviar mensagem Telegram",
                "parameters": [
                    {
                        "description": "Dados da mensagem",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/telegram.SendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/telegram.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/telegram.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/telegram/webhook": {
            "post": {
                "description": "Recebe eventos do Telegram e armazena a mensagem básica. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "telegram beta"
                ],
                "summary": "Webhook Telegram",
                "parameters": [
                    {
                        "description": "Atualização do Telegram",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "acknowledged",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/telegram.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/whatsapp/ping": {
            "get": {
                "description": "Verifica se o adaptador de WhatsApp está ativo. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "whatsapp beta"
                ],
                "summary": "Ping WhatsApp",
                "responses": {
                    "200": {
                        "description": "status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/whatsapp/send": {
            "post": {
                "description": "Dispara mensagem via canal de integração configurado. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "whatsapp beta"
                ],
                "summary": "Enviar mensagem WhatsApp",
                "parameters": [
                    {
                        "description": "Dados da mensagem",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/whatsapp.SendMessageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/whatsapp.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/whatsapp.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/whatsapp/webhook": {
            "get": {
                "description": "Recebe chamadas de verificação (GET) e eventos (POST) vindo do WhatsApp Business. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "whatsapp beta"
                ],
                "summary": "Webhook WhatsApp",
                "parameters": [
                    {
                        "type": "string",
                        "example": "subscribe",
                        "description": "Modo do webhook",
                        "name": "hub.mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token de verificação",
                        "name": "hub.verify_token",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token de desafio",
                        "name": "hub.challenge",
                        "in": "query"
                    },
                    {
                        "description": "Evento enviado pelo WhatsApp",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/whatsapp.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/whatsapp.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Recebe chamadas de verificação (GET) e eventos (POST) vindo do WhatsApp Business. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "whatsapp beta"
                ],
                "summary": "Webhook WhatsApp",
                "parameters": [
                    {
                        "type": "string",
                        "example": "subscribe",
                        "description": "Modo do webhook",
                        "name": "hub.mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token de verificação",
                        "name": "hub.verify_token",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Token de desafio",
                        "name": "hub.challenge",
                        "in": "query"
                    },
                    {
                        "description": "Evento enviado pelo WhatsApp",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/whatsapp.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/whatsapp.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/app/{path}": {
            "get": {
                "description": "Carrega assets estáticos da SPA hospedada no gateway. [Em desenvolvimento]",
                "produces": [
                    "text/html",
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Servir UI",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Caminho para o asset",
                        "name": "path",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Conteúdo HTML/estático",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/chat": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Dispara uma conversação streaming (`data: {\"delta\"}`) com o provedor configurado. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/event-stream"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Chat streaming",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chave externa do cliente",
                        "name": "X-External-API-Key",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Tenant que originou a requisição",
                        "name": "X-Tenant-ID",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "Identificador do usuário",
                        "name": "X-User-ID",
                        "in": "header"
                    },
                    {
                        "description": "Dados da sessão de chat",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_app_controllers_gateway.ChatRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fluxo SSE com eventos {\\\"delta\\\":string}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cronjobs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna todos os cron jobs cadastrados. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Listar cron jobs (legacy)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronJobListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cronjobs/{id}/execute/{job_id}": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Dispara manualmente a execução do cron job informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cron beta"
                ],
                "summary": "Executar cron job manualmente (legacy)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do cron job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID adicional do job",
                        "name": "job_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cron.CronActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/cron.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Retorna status \"healthy\" para monitoramento. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system beta"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manage.HealthResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Retorna status \"healthy\" para monitoramento. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system beta"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manage.HealthResponse"
                        }
                    }
                }
            }
        },
        "/health/scheduler/force": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Agenda uma execução manual assíncrona do scheduler. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Forçar execução do scheduler",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/gateway.SchedulerActionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/health/scheduler/stats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Exibe contadores básicos e o horário da última execução. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Estatísticas do scheduler",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.SchedulerStatsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Validates service availability for gateway integrations. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Healthcheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.GatewayHealthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/mcp/tasks": {
            "get": {
                "description": "Controller for managing tasks in the MCP\nRetrieves a list of all tasks.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get All Tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mcp/tasks/active": {
            "get": {
                "description": "Retrieves all active tasks.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Active Tasks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mcp/tasks/due": {
            "get": {
                "description": "Retrieves tasks due for execution.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Tasks Due for Execution",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mcp/tasks/provider/{provider}": {
            "get": {
                "description": "Retrieves tasks by provider.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Tasks by Provider",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mcp/tasks/target/{target}": {
            "get": {
                "description": "Retrieves tasks by target.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Tasks by Target",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {}
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mcp/tasks/{id}": {
            "get": {
                "description": "Retrieves a task by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Task by ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a task by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Task",
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mcp/tasks/{id}/completed": {
            "post": {
                "description": "Marks a task as completed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Mark Task as Completed",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mcp/tasks/{id}/cronjob": {
            "get": {
                "description": "Retrieves the CronJob representation of a task.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get Task CronJob",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mcp.CronJobIntegration"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mcp/tasks/{id}/failed": {
            "post": {
                "description": "Marks a task as failed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Mark Task as Failed",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/mcp/tasks/{id}/running": {
            "post": {
                "description": "Marks a task as running.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Mark Task as Running",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "description": "Retorna mensagem de ping/pong para verificação de conectividade. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system beta"
                ],
                "summary": "Ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manage.PingResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Retorna mensagem de ping/pong para verificação de conectividade. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system beta"
                ],
                "summary": "Ping",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manage.PingResponse"
                        }
                    }
                }
            }
        },
        "/providers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Exibe os provedores configurados e seus estados de disponibilidade. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway beta"
                ],
                "summary": "Listar provedores",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.ProvidersResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reports uptime and dependency health for the gateway module. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Service status",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.GatewayHealthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna a lista de usuários ativos do sistema. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Listar usuários",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.UserListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/email/{email}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna o usuário associado ao email informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Buscar usuário por email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "E-mail",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/username/{username}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna usuário associado ao username informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Buscar usuário por username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Recupera um usuário específico pelo ID informado. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Obter usuário",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do usuário",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Atualiza os campos permitidos para o usuário informado. [Em desenvolvimento]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Atualizar usuário",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do usuário",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Dados a atualizar",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove o usuário identificado pelo ID. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users beta"
                ],
                "summary": "Remover usuário",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do usuário",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.DeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/webhooks": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Aceita eventos externos, valida o JSON e agenda processamento interno",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Receber webhook",
                "parameters": [
                    {
                        "description": "Evento enviado pelo provedor",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/gateway.WebhookAckResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/webhooks/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna lista paginada de eventos de webhook recebidos",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Listar webhook events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Número máximo de eventos (default: 50)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Número de eventos a pular (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filtrar por fonte do webhook",
                        "name": "source",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.WebhookEventsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/webhooks/events/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna detalhes de um evento específico de webhook",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Obter webhook event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID do evento",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.WebhookEvent"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/webhooks/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retorna status do receptor de webhooks com estatísticas detalhadas",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Healthcheck webhooks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.WebhookHealthResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/v1/webhooks/retry": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reagenda todos os eventos de webhook que falharam para reprocessamento",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gateway"
                ],
                "summary": "Retry webhook events",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gateway.WebhookRetryResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/gateway.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Informa a versão corrente da aplicação. [Em desenvolvimento]",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system beta"
                ],
                "summary": "Versão",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manage.VersionResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/manage.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "analyzer.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "analyzer.NotificationRequest": {
            "type": "object",
            "properties": {
                "attach_files": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "priority": {
                    "description": "\"low\", \"normal\", \"high\", \"urgent\"",
                    "type": "string"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "subject": {
                    "type": "string"
                },
                "type": {
                    "description": "\"discord\", \"email\", \"webhook\"",
                    "type": "string"
                }
            }
        },
        "analyzer.RepositoryIntelligenceRequest": {
            "type": "object",
            "required": [
                "analysis_type",
                "repo_url"
            ],
            "properties": {
                "analysis_type": {
                    "type": "string"
                },
                "configuration": {
                    "type": "object",
                    "additionalProperties": true
                },
                "max_retries": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "notify_channels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project_id": {
                    "type": "string"
                },
                "repo_url": {
                    "type": "string"
                },
                "scheduled_by": {
                    "type": "string"
                },
                "source_type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "clients.ArchiveInfo": {
            "type": "object",
            "properties": {
                "archivedAt": {
                    "type": "string"
                },
                "archivedBy": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "clients.ClientContact": {
            "type": "object",
            "properties": {
                "contactName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "mobilePhone": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "clients.ClientStatus": {
            "type": "string",
            "enum": [
                "ACTIVE",
                "INACTIVE",
                "PENDING",
                "BLOCKED",
                "ARCHIVED"
            ],
            "x-enum-varnames": [
                "Active",
                "Inactive",
                "Pending",
                "Blocked",
                "Archived"
            ]
        },
        "clients.ClientType": {
            "type": "string",
            "enum": [
                "individual",
                "company"
            ],
            "x-enum-varnames": [
                "Individual",
                "Company"
            ]
        },
        "contacts.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "contacts.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "operation completed"
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "cron.CronActionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "cron.CronExecutionLogsResponse": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "cron.CronJobListResponse": {
            "type": "object",
            "properties": {
                "jobs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CronJobModel"
                    }
                }
            }
        },
        "cron.CronJobQueueResponse": {
            "type": "object",
            "properties": {
                "queue": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                }
            }
        },
        "cron.CronJobRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "expression": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "cron.CronJobResponse": {
            "type": "object",
            "properties": {
                "job": {
                    "$ref": "#/definitions/models.CronJobModel"
                }
            }
        },
        "cron.CronValidateRequest": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string"
                }
            }
        },
        "cron.CronValidateResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "cron.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "cron.RescheduleRequest": {
            "type": "object",
            "properties": {
                "new_expression": {
                    "type": "string"
                }
            }
        },
        "customers.ClientModel": {
            "type": "object",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Address"
                    }
                },
                "archiveInfo": {
                    "$ref": "#/definitions/clients.ArchiveInfo"
                },
                "code": {
                    "type": "string"
                },
                "contact": {
                    "$ref": "#/definitions/clients.ClientContact"
                },
                "createdAt": {
                    "type": "string"
                },
                "creditLimit": {
                    "type": "number"
                },
                "documentType": {
                    "$ref": "#/definitions/clients.ClientType"
                },
                "id": {
                    "type": "string"
                },
                "lastOrderDate": {
                    "type": "string"
                },
                "lastSync": {
                    "type": "string"
                },
                "mainAddress": {
                    "$ref": "#/definitions/types.Address"
                },
                "notes": {
                    "type": "string"
                },
                "paymentTerms": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/clients.ClientStatus"
                },
                "totalOrders": {
                    "type": "integer"
                },
                "totalSpent": {
                    "type": "number"
                },
                "tradingName": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "customers.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "discord.DiscordActionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "request_id": {
                    "type": "string"
                }
            }
        },
        "discord.DiscordApprovalList": {
            "type": "object",
            "properties": {
                "approvals": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "discord.DiscordInteractionEvent": {
            "type": "object",
            "additionalProperties": {}
        },
        "discord.DiscordInteractionResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "discord.DiscordOAuthAuthorizeResponse": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "redirect_uri": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            }
        },
        "discord.DiscordOAuthTokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "discord.DiscordPingResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "discord.DiscordTestMessageRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "discord.DiscordTestResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            }
        },
        "discord.DiscordWebhookAck": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "discord.DiscordWebhookEvent": {
            "type": "object",
            "additionalProperties": {}
        },
        "discord.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "gateway.AdviceRequest": {
            "type": "object",
            "properties": {
                "audience": {
                    "type": "string"
                },
                "context": {
                    "type": "object",
                    "additionalProperties": true
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "model": {
                    "type": "string"
                },
                "prompt": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "stream": {
                    "type": "boolean"
                },
                "tone": {
                    "type": "string"
                }
            }
        },
        "gateway.AdviceResponse": {
            "type": "object",
            "properties": {
                "advice": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "gateway.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "gateway.GatewayHealthResponse": {
            "type": "object",
            "properties": {
                "services": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/gateway.GatewayServiceHealth"
                    }
                },
                "started": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "gateway.GatewayProvidersStatus": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "unavailable": {
                    "type": "integer"
                }
            }
        },
        "gateway.GatewayServiceHealth": {
            "type": "object",
            "properties": {
                "detail": {
                    "$ref": "#/definitions/gateway.GatewayProvidersStatus"
                },
                "healthy": {
                    "type": "boolean"
                }
            }
        },
        "gateway.LookAtniActionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "gateway.LookAtniDownloadResponse": {
            "type": "object",
            "properties": {
                "download_url": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "note": {
                    "type": "string"
                }
            }
        },
        "gateway.LookAtniProjectsResponse": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": true
                    }
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "gateway.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "gateway.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "operation completed"
                },
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "gateway.ProviderItem": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "default_model": {
                    "type": "string"
                },
                "last_error": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "gateway.ProvidersResponse": {
            "type": "object",
            "properties": {
                "providers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gateway.ProviderItem"
                    }
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "gateway.SchedulerActionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "gateway.SchedulerStats": {
            "type": "object",
            "properties": {
                "average_duration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "jobs_completed": {
                    "type": "integer"
                },
                "jobs_pending": {
                    "type": "integer"
                },
                "jobs_running": {
                    "type": "integer"
                },
                "last_failure": {
                    "type": "string"
                },
                "last_run": {
                    "type": "string"
                },
                "uptime": {
                    "$ref": "#/definitions/time.Duration"
                }
            }
        },
        "gateway.SchedulerStatsResponse": {
            "type": "object",
            "properties": {
                "stats": {
                    "$ref": "#/definitions/gateway.SchedulerStats"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "gateway.ScorecardAdviceResponse": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "advice": {
                    "type": "string"
                },
                "generated_at": {
                    "type": "string"
                },
                "metrics": {
                    "type": "object",
                    "additionalProperties": true
                },
                "priority": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "gateway.ScorecardEntry": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "score": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "gateway.ScorecardMetricsResponse": {
            "type": "object",
            "properties": {
                "metrics": {
                    "type": "object",
                    "additionalProperties": true
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "gateway.ScorecardResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gateway.ScorecardEntry"
                    }
                },
                "total": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "gateway.WebhookAckResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "gateway.WebhookEvent": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "event_type": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "payload": {
                    "type": "object",
                    "additionalProperties": true
                },
                "processed": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "gateway.WebhookEventsResponse": {
            "type": "object",
            "properties": {
                "events": {
                    "type": "array",
                    "items": {}
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "gateway.WebhookHealthResponse": {
            "type": "object",
            "properties": {
                "stats": {
                    "type": "object",
                    "additionalProperties": true
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "gateway.WebhookRetryResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "retried_count": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "github_com_kubex-ecosystem_gdbase_types.JSONB": {
            "type": "object",
            "additionalProperties": {}
        },
        "github_com_kubex-ecosystem_gobe_internal_app_controllers_gateway.ChatRequest": {
            "type": "object",
            "properties": {
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gateway.Message"
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": true
                },
                "model": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "stream": {
                    "type": "boolean"
                },
                "temperature": {
                    "type": "number"
                }
            }
        },
        "github_com_kubex-ecosystem_gobe_internal_app_controllers_mcp_analyzer.AnalysisJob": {
            "type": "object",
            "properties": {
                "analysis_type": {
                    "type": "string"
                },
                "completed_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "error_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "input_data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "job_type": {
                    "type": "string"
                },
                "max_retries": {
                    "type": "integer"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": true
                },
                "output_data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "progress": {
                    "type": "number"
                },
                "project_id": {
                    "type": "string"
                },
                "repo_url": {
                    "type": "string"
                },
                "results": {
                    "type": "object",
                    "additionalProperties": true
                },
                "retry_count": {
                    "type": "integer"
                },
                "scheduled_by": {
                    "type": "string"
                },
                "source_type": {
                    "type": "string"
                },
                "started_at": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "github_com_kubex-ecosystem_gobe_internal_app_controllers_mcp_analyzer.ScorecardResponse": {
            "type": "object",
            "properties": {
                "ai": {
                    "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_services_analyzer.AIMetrics"
                },
                "bus_factor": {
                    "type": "integer"
                },
                "chi": {
                    "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_services_analyzer.CHIMetrics"
                },
                "confidence": {
                    "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_services_analyzer.ConfidenceMetrics"
                },
                "dora": {
                    "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_services_analyzer.DORAMetrics"
                },
                "first_review_p50_hours": {
                    "type": "number"
                },
                "generated_at": {
                    "type": "string"
                },
                "job_id": {
                    "type": "string"
                },
                "repository": {
                    "$ref": "#/definitions/github_com_kubex-ecosystem_gobe_internal_services_analyzer.RepositoryInfo"
                },
                "schema_version": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "github_com_kubex-ecosystem_gobe_internal_contracts_types.ContactForm": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "github_com_kubex-ecosystem_gobe_internal_services_analyzer.AIMetrics": {
            "type": "object",
            "properties": {
                "aac": {
                    "description": "AI Assist Coverage",
                    "type": "number"
                },
                "ai_hours": {
                    "type": "number"
                },
                "calculated_at": {
                    "type": "string"
                },
                "hir": {
                    "description": "Human Input Ratio",
                    "type": "number"
                },
                "human_hours": {
                    "type": "number"
                },
                "period_days": {
                    "type": "integer"
                },
                "tph": {
                    "description": "Throughput per Human-hour",
                    "type": "number"
                }
            }
        },
        "github_com_kubex-ecosystem_gobe_internal_services_analyzer.CHIMetrics": {
            "type": "object",
            "properties": {
                "calculated_at": {
                    "type": "string"
                },
                "chi_score": {
                    "type": "integer"
                },
                "cyclomatic_avg": {
                    "type": "number"
                },
                "duplication_pct": {
                    "type": "number"
                },
                "maintainability_index": {
                    "type": "number"
                },
                "period_days": {
                    "type": "integer"
                },
                "technical_debt_hours": {
                    "type": "number"
                },
                "test_coverage_pct": {
                    "type": "number"
                }
            }
        },
        "github_com_kubex-ecosystem_gobe_internal_services_analyzer.ConfidenceMetrics": {
            "type": "object",
            "properties": {
                "ai": {
                    "type": "number"
                },
                "chi": {
                    "type": "number"
                },
                "dora": {
                    "type": "number"
                },
                "group": {
                    "type": "number"
                }
            }
        },
        "github_com_kubex-ecosystem_gobe_internal_services_analyzer.DORAMetrics": {
            "type": "object",
            "properties": {
                "calculated_at": {
                    "type": "string"
                },
                "change_fail_rate_pct": {
                    "type": "number"
                },
                "deployment_frequency_per_week": {
                    "type": "number"
                },
                "lead_time_p95_hours": {
                    "type": "number"
                },
                "mttr_hours": {
                    "type": "number"
                },
                "period_days": {
                    "type": "integer"
                }
            }
        },
        "github_com_kubex-ecosystem_gobe_internal_services_analyzer.RepositoryInfo": {
            "type": "object",
            "properties": {
                "clone_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "default_branch": {
                    "type": "string"
                },
                "full_name": {
                    "type": "string"
                },
                "is_private": {
                    "type": "boolean"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "owner": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "manage.ActionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "manage.ConfigResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "manage.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "manage.HealthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "manage.PingResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "manage.VersionResponse": {
            "type": "object",
            "properties": {
                "version": {
                    "type": "string"
                }
            }
        },
        "mcp.CronJobIntegration": {
            "type": "object",
            "properties": {
                "api_endpoint": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "cron_expression": {
                    "type": "string"
                },
                "headers": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "method": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "retries": {
                    "type": "integer"
                },
                "timeout": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.CronJobModel": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "api_endpoint": {
                    "type": "string"
                },
                "command": {
                    "description": "ajustar para que não seja obrigatório, mas revisar a lógica de execução antes",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "cron_expression": {
                    "type": "string"
                },
                "cron_type": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "ends_at": {
                    "type": "string"
                },
                "exec_timeout": {
                    "type": "integer"
                },
                "headers": {
                    "$ref": "#/definitions/github_com_kubex-ecosystem_gdbase_types.JSONB"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "is_recurring": {
                    "type": "boolean"
                },
                "last_executed_at": {
                    "type": "string"
                },
                "last_executed_by": {
                    "type": "string"
                },
                "last_run_message": {
                    "type": "string"
                },
                "last_run_status": {
                    "type": "string"
                },
                "last_run_time": {
                    "type": "string"
                },
                "max_execution_time": {
                    "type": "integer"
                },
                "max_retries": {
                    "type": "integer"
                },
                "metadata": {
                    "$ref": "#/definitions/github_com_kubex-ecosystem_gdbase_types.JSONB"
                },
                "method": {
                    "description": "ajustar para que não seja obrigatório, mas revisar a lógica de execução antes",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "payload": {
                    "$ref": "#/definitions/github_com_kubex-ecosystem_gdbase_types.JSONB"
                },
                "retries": {
                    "type": "integer"
                },
                "retry_interval": {
                    "type": "integer"
                },
                "starts_at": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.ProductModel": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/products.ProductCategory"
                },
                "categoryId": {
                    "type": "string"
                },
                "code": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dimensions": {
                    "$ref": "#/definitions/products.Dimensions"
                },
                "ean": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "imageUrl": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "minOrderQuantity": {
                    "type": "integer"
                },
                "multipleOrderQuantity": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "priceTables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/products.PriceTable"
                    }
                },
                "sku": {
                    "type": "string"
                },
                "stock": {
                    "$ref": "#/definitions/products.Stock"
                },
                "unit": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                }
            }
        },
        "products.Dimensions": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number"
                },
                "length": {
                    "type": "number"
                },
                "width": {
                    "type": "number"
                }
            }
        },
        "products.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "products.PriceTable": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "$ref": "#/definitions/types.Money"
                }
            }
        },
        "products.ProductCategory": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                }
            }
        },
        "products.Stock": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "integer"
                },
                "reserved": {
                    "type": "integer"
                },
                "virtual": {
                    "type": "integer"
                }
            }
        },
        "telegram.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "telegram.SendMessageRequest": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "format": "int64",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000,
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour",
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        },
        "types.Address": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "postalCode": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                }
            }
        },
        "types.Money": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "currency": {
                    "type": "string"
                }
            }
        },
        "users.AuthRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "remember": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.AuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/users.UserSummary"
                }
            }
        },
        "users.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role_id": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "users.DeleteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "users.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "users.LogoutRequest": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "users.RefreshRequest": {
            "type": "object",
            "properties": {
                "id_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "users.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role_id": {
                    "type": "string"
                }
            }
        },
        "users.UserListResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/users.UserSummary"
                    }
                }
            }
        },
        "users.UserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/users.UserSummary"
                }
            }
        },
        "users.UserSummary": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "whatsapp.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "detailed error message"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "whatsapp.SendMessageRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Forneça \"Bearer \u003ctoken\u003e\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}